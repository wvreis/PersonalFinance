@using PersonalFinance.Helpers.APIs;
@using PersonalFinance.Helpers;
@using PersonalFinance.Helpers.Routes;
@using PersonalFinance.Models;
@using System.Linq.Expressions;
@using PersonalFinance.RequestModels;
@attribute [
    Route(TransactionsRoutes.Index)
]
@inherits General

<PageTitle>Movimentações</PageTitle>

@if (Loading) {
    <div class="rz-m-12">
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
    </div>
}
else {
    <RadzenText TextStyle="TextStyle.DisplayH4" class="rz-m-6">
        Movimentações
    </RadzenText>    

    <RadzenRow Gap="1rem" Class="rz-mt-8 rz-mb-4" Style="width: 100%" JustifyContent="JustifyContent.Center">
        <RadzenColumn Size="3">
            <RadzenLabel Text="De" />
            <RadzenDatePicker 
                DateFormat="dd/MM/yyyy"
                Value=@SearchModel.StartDate
                TValue="DateTime"
                Change="@((d) => Search(startDate: d))"/>
        </RadzenColumn>

        <RadzenColumn Size="3">
            <RadzenLabel Text="Até" />
            <RadzenDatePicker 
                DateFormat="dd/MM/yyyy"
                Value=@SearchModel.EndDate
                TValue="DateTime"
                Change="@((d) => Search(endDate: d))"/>
        </RadzenColumn>

        <RadzenColumn Size="3">
            <RadzenDropDown 
                Value=@SearchModel.Status
                TValue="TransactionStatus?"
                ValueChanged="@((s) => Search(status: s))"
                Data=@Transaction.StatusDictionary
                Style="width: 100%; max-width: 400px;"
                ValueProperty="Key"
                AllowClear=true
                TextProperty="@(ObjectHelper.GetFullName<Dictionary<TransactionStatus, (string text, int style )>, string>(x => x.First().Value.text))"
                Placeholder="Situação..." />
        </RadzenColumn>
    </RadzenRow>

    <RadzenRow Gap="1rem" Class="rz-mt-8 rz-mb-4" Style="width: 100%" JustifyContent="JustifyContent.SpaceEvenly">
        <RadzenColumn Size="10">
            <RadzenTextBox 
                Placeholder="Pesquisar por..."
                Style="width: 100%"
                @bind-Value="@SearchModel.SearchInfo"/>                   
        </RadzenColumn>

        <RadzenColumn>
            <RadzenButton 
                Icon="search"
                Style="width: 100%"
                Click="@(() => Search())"/>
        </RadzenColumn>

        <RadzenColumn>
            <RadzenButton 
                Icon="history"
                Style="width: 100%"
                Click="(() => ResetSearch())" />
        </RadzenColumn>

        <RadzenColumn>
            <RadzenButton 
                Icon="add"
                Style="width: 100%"
                Click="NavigateToAddition"/>
        </RadzenColumn>
    </RadzenRow>

    <RadzenDataGrid       
        PageSize="25" 
        AllowPaging="false" 
        PagerHorizontalAlign="HorizontalAlign.Left" 
        ShowPagingSummary="false"
        Data="@Transactions" 
        TItem="Transaction" 
        ColumnWidth="300px" 
        LogicalFilterOperator="LogicalFilterOperator.Or"
        EmptyText="Não há registros a serem listados.">
        
        <Columns>
            <RadzenDataGridColumn 
                TItem="Transaction"
                Property="@(ObjectHelper.GetFullName<Transaction, int>(x => x.Id))"
                Title="#" 
                Frozen="true" 
                Width="40px" 
                TextAlign="TextAlign.Center" 
                CssClass=“font-weight-bold” />
            
            <RadzenDataGridColumn 
                TItem="Transaction"
                Property="@(ObjectHelper.GetFullName<Transaction, string>(x => x.Description))"
                Title="Descrição" 
                Frozen="true" 
                Width="250px" />
            
            <RadzenDataGridColumn 
                TItem="Transaction" 
                Property="@(ObjectHelper.GetFullName<Transaction, double>(x => x.Amount))" 
                Title="Valor"
                Width="90px">

                <Template Context="detail">
                    @String.Format(new System.Globalization.CultureInfo("pt-BR"), "{0:C}", detail.Amount)
                </Template>

            </RadzenDataGridColumn>
            
            <RadzenDataGridColumn 
                TItem="Transaction"
                Property="@(ObjectHelper.GetFullName<Transaction, DateTime>(x => x.Date))"
                Title="Data"
                Width="90px" >

                <Template Context="data">
                    @(data.Date.ToString("dd/MM/yyyy"))
                </Template>

            </RadzenDataGridColumn>

            <RadzenDataGridColumn 
                TItem="Transaction"
                Property="@(ObjectHelper.GetFullName<Transaction, string>(x => x.Account.Description))"
                Title="Conta" 
                Width="80px" />

            <RadzenDataGridColumn 
                TItem="Transaction"
                Property="@(ObjectHelper.GetFullName<Transaction, string>(x => x.Account.Description))"
                Title="Situação" 
                Width="80px">
                
                <Template Context="transaction">
                    <RadzenBadge 
                        BadgeStyle="@((BadgeStyle)Transaction.StatusDictionary.First(x => x.Key == transaction.Status).Value.style)"
                        Text="@(Transaction.StatusDictionary.First(x => x.Key == transaction.Status).Value.text)" />
                </Template>
            
            </RadzenDataGridColumn>
            
            <RadzenDataGridColumn 
                TItem="Transaction" 
                Property="" 
                Title="" 
                Width="70px" 
                TextAlign="TextAlign.End">

                <Template Context="transaction">
                    <a href="@TransactionsRoutes.GoToEdition(transaction.Id)">
                        <RadzenButton Text="Editar"/>
                    </a>
                </Template>

            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}

@code {
    List<Transaction> Transactions { get; set; }
    TransactionSearchModel SearchModel { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        try {
            await Search();
        }
        catch (Exception ex) {

            await ErrorMsg(ex);
        }
    }

    async Task Search(DateTime? startDate = null, DateTime? endDate = null, TransactionStatus? status = null)
    {
        if (startDate.HasValue) {
            SearchModel.StartDate = startDate;
        }

        if (endDate.HasValue) {
            SearchModel.EndDate = endDate;
        }

        SearchModel.Status = status;

        Transactions = await TransactionsAPI.GetSearch(SearchModel);
    }

    async Task ResetSearch()
    {
        SearchModel = null;
        SearchModel = new();
        await Search();
    }

    void NavigateToAddition()
    {
        NavigationManager.NavigateTo(TransactionsRoutes.GoToAddition());
    }

    #region VALIDATION
    bool Loading => Transactions is null;
    #endregion
}
