@using PersonalFinance.Helpers.APIs;
@using PersonalFinance.Helpers.Routes;
@using PersonalFinance.Helpers;
@using PersonalFinance.Models;
@attribute [
    Route(AccountsRoutes.Addition),
    Route(AccountsRoutes.Edition)
]
@inherits General

@if (Loading) {
    <p>Carregando...</p>
}
else {
    <header>@GetHeaderText() Conta</header>

    <RadzenTemplateForm Data="Account" Submit="@((Account args) => Confirm())" InvalidSubmit="InvalidConfirmation" TItem="Account">
        <DataAnnotationsValidator />

        <RadzenRow Gap="width: 100%">
            <RadzenColumn Size="12" SizeMD="6">
                <RadzenStack Gap="1rem">
                    <RadzenFieldset Text="Dados">
                        <RadzenRow AlignItems="AlignItems.Center">

                            <RadzenColumn>
                                <RadzenLabel Text="Descrição" Style="width: 100%" Component="Name"/>
                                <RadzenTextBox 
                                    @bind-Value="Account.Description"
                                    Style="width: 80%;" 
                                    Name="Name"
                                    />
                                <ValidationMessage For="@(() => Account.Description)"/>
                            </RadzenColumn>

                            <RadzenColumn>
                                <RadzenLabel Text="Saldo Inicial" Style="width: 100%" />
                                <RadzenNumeric 
                                    TValue="double" 
                                    Format="c" 
                                    @bind-Value=@Account.OpeningBalance 
                                    Style="width: 80%"/>
                            </RadzenColumn>

                            <RadzenColumn Size="12" SizeMD="6">
                                <RadzenLabel Text="Banco" Style="width: 100%" Component="BankId"/>
                                <RadzenDropDown
                                    @bind-Value="Account.BankId" 
                                    AllowClear="true" 
                                    AllowFiltering="true"
                                    Placeholder="Selecione..." 
                                    Data="@Banks" 
                                    Style="width: 80%;" 
                                    TextProperty="Name" 
                                    ValueProperty="Id" 
                                    Name="BankId">
                                </RadzenDropDown>
                                <RadzenRequiredValidator Component="BankId"/>
                                <ValidationMessage For="@(() => Account.BankId)" />
                            </RadzenColumn>

                        </RadzenRow>
                    </RadzenFieldset>
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>

        <RadzenStack 
            Orientation="Orientation.Horizontal" 
            JustifyContent="JustifyContent.End" 
            Gap="1rem"
            Class="rz-mt-8 rz-mb-4">

            <RadzenButton 
                ButtonType="ButtonType.Submit" 
                Size="ButtonSize.Large" 
                Icon="save" 
                Text="Salvar" />

            <RadzenButton 
                ButtonStyle="ButtonStyle.Light" 
                Variant="Variant.Flat" 
                Size="ButtonSize.Large" 
                Icon="cancel" 
                Text="Cancelar"
                Click="@(() => Cancel())" />

            @if (!IsNew) {
                <RadzenButton 
                    ButtonStyle="ButtonStyle.Danger"
                    Variant="Variant.Flat"
                    Size="ButtonSize.Large"
                    Icon="remove"
                    Text="Excluir"
                    Click="@(() => Remove())"/>
            }
        </RadzenStack>
    </RadzenTemplateForm>
}


@code {
    [Parameter] public int Id { get; set; }
    Account Account { get; set; }

    List<Bank> Banks;

    protected override async Task OnInitializedAsync()
    {
        Banks = await AccountsAPI.GetBanks();

        Account =  IsNew ?  new() :await AccountsAPI.Get(Id);
    }

    async Task Confirm()
    {
        try {
            Account.Bank = null;

            var result = IsNew ? await Addition() : await Edition();

            if (!result.IsSuccessStatusCode)
                throw new Exception(result.ReasonPhrase);

            NavigationManager.NavigateTo(AccountsRoutes.GoToIndex());
        }
        catch (Exception ex) {

            throw ex;
        }
    }

    async Task InvalidConfirmation(FormInvalidSubmitEventArgs args)
    {
        await DialogService.Alert(string.Join("<br/>", args.Errors), "Erro");
    }

    void Cancel()
    {
        NavigationManager.NavigateTo(AccountsRoutes.Index);
    }

    async Task Remove()
    {
        try {
            
            var confirmed = await DialogService
                .Confirm(
                    "Deseja Confirmar a Exclusão?", 
                    "Exclusão", 
                    new ConfirmOptions(){ 
                        OkButtonText = "Sim", CancelButtonText = "Não"
                    }
                );

            if (!(bool)confirmed)
                return;

            var result = await AccountsAPI.DeleteAccount(Id);

            if (!result.IsSuccessStatusCode)
                throw new Exception(result.ReasonPhrase);

            NavigationManager.NavigateTo(AccountsRoutes.GoToIndex());
        }
        catch (Exception ex) {

            throw ex;
        }
    }

    async Task<HttpResponseMessage> Addition() => await AccountsAPI.PostAccount(Account);
    async Task<HttpResponseMessage> Edition() => await AccountsAPI.PutAccount(Id, Account);

    #region AUXILIARY
    string GetHeaderText() => IsNew ? "Incluindo" : "Editando";
    #endregion

    #region VALIDATIONS
    bool Loading => Account is null;
    bool IsNew => Id == 0;
    #endregion
}
