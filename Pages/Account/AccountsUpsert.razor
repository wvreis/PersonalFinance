@using PersonalFinance.Helpers.APIs;
@using PersonalFinance.Helpers.Routes;
@using PersonalFinance.Helpers;
@using PersonalFinance.Models;
@attribute [
    Route(AccountsRoutes.Addition),
    Route(AccountsRoutes.Edition)
]
@inherits General

@if (Loading) {
    <div class="rz-m-12">
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
    </div>
}
else {
    <RadzenText TextStyle="TextStyle.DisplayH4" class="rz-m-6">
        @GetHeaderText() Conta
    </RadzenText>

    <RadzenTemplateForm Data="Account" Submit="@((args) => Confirm())" InvalidSubmit="InvalidConfirmation" TItem="Account">
        <DataAnnotationsValidator />

        <RadzenRow Gap="width: 100%">
            <RadzenColumn Size="12" SizeMD="6">
                <RadzenStack Gap="1rem">
                    <RadzenFieldset Text="Dados">
                        <RadzenRow AlignItems="AlignItems.Center">

                            <RadzenColumn>
                                <RadzenLabel Text="Descrição" Style="width: 100%" Component="Name"/>
                                <RadzenTextBox 
                                    @bind-Value="Account.Description"
                                    Style="width: 100%;" 
                                    Name="Name"
                                    />
                                <ValidationMessage For="@(() => Account.Description)"/>
                            </RadzenColumn>

                            <RadzenColumn>
                                <RadzenLabel Text="Saldo Inicial" Style="width: 100%" />
                                <RadzenNumeric 
                                    TValue="double" 
                                    Format="c" 
                                    @bind-Value=@Account.OpeningBalance 
                                    Style="width: 100%"/>
                            </RadzenColumn>

                            <RadzenColumn Size="12" SizeMD="6">
                                <RadzenLabel Text="Banco" Style="width: 100%" Component="BankId"/>
                                <RadzenDropDown
                                    @bind-Value="Account.BankId" 
                                    AllowClear="true" 
                                    AllowFiltering="true"
                                    Placeholder="Selecione..." 
                                    Data="@Banks" 
                                    Style="width: 100%;" 
                                    TextProperty="@(ObjectHelper.GetFullName<Bank, string>(x => x.Name))" 
                                    ValueProperty="Id" 
                                    Name="BankId"
                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive">
                                </RadzenDropDown>
                                <RadzenRequiredValidator Component="BankId"/>
                                <ValidationMessage For="@(() => Account.BankId)" />
                            </RadzenColumn>

                            <RadzenColumn Size="12" SizeMD="6">
                                <RadzenLabel Text="Tipo de Conta" Style="width: 100%" Component="AccountTypeId" />
                                <RadzenDropDown
                                    @bind-Value="Account.AccountTypeId" 
                                    AllowClear="true" 
                                    AllowFiltering="true"
                                    Placeholder="Selecione..." 
                                    Data="@AccountTypes" 
                                    Style="width: 100%;" 
                                    TextProperty="@(ObjectHelper.GetFullName<AccountType, string>(x => x.Description))" 
                                    ValueProperty="Id" 
                                    Name="AccountTypeId"
                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive">
                                </RadzenDropDown>
                                <RadzenRequiredValidator Component="AccountTypeId" />
                                <ValidationMessage For="@(() => Account.AccountTypeId)" />
                            </RadzenColumn>

                            @if (!IsNew) {
                            }
                            <RadzenColumn>
                                <RadzenLabel Text="@Account.Status.GetActiveInactive()" Style="width: 100%" />
                                <RadzenSwitch @bind-Value="@Account.Status" Disabled="@(IsNew)"/>
                            </RadzenColumn>

                        </RadzenRow>
                    </RadzenFieldset>
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>

        <RadzenStack 
            Orientation="Orientation.Horizontal" 
            JustifyContent="JustifyContent.End" 
            Gap="1rem"
            Class="rz-mt-8 rz-mb-4">

            <RadzenButton 
                ButtonType="ButtonType.Submit" 
                Size="ButtonSize.Large" 
                Icon="save" 
                Text="Salvar" />

            <RadzenButton 
                ButtonStyle="ButtonStyle.Light" 
                Variant="Variant.Flat" 
                Size="ButtonSize.Large" 
                Icon="arrow_back" 
                Text="Voltar"
                Click="Back" />

            @if (!IsNew) {
                <RadzenButton 
                    ButtonStyle="ButtonStyle.Danger"
                    Variant="Variant.Flat"
                    Size="ButtonSize.Large"
                    Icon="remove"
                    Text="Excluir"
                    Click="Remove"/>
            }
        </RadzenStack>
    </RadzenTemplateForm>
}


@code {
    [Parameter] public int Id { get; set; }
    Account Account { get; set; }

    List<Bank> Banks;
    List<AccountType> AccountTypes;

    protected override async Task OnInitializedAsync()
    {
        try {
            await LoadObjects();
        }
        catch (Exception ex) {

            await ErrorMsg(ex);
        }
    }

    async Task Confirm()
    {
        try {
            CleanDependencys();

            var result = IsNew ? await Addition() : await Edition();

            await CheckResult(result);
        }
        catch (Exception ex) {

            await ErrorMsg(ex);
        }
    }    

    void Back()
    {
        NavigationManager.NavigateTo(AccountsRoutes.Index);
    }

    async Task Remove()
    {
        try {

            var exclusionConfirmed = await DialogConfirmation("Deseja Confirmar a Exclusão?", "Exclusão");            

            if (!exclusionConfirmed)
                return;

            var result = await AccountsAPI.DeleteAccount(Id);

            await CheckResult(result);
        }
        catch (Exception ex) {

            await ErrorMsg(ex);
        }
    }

    #region AUXILIARY
    async Task LoadObjects()
    {
        Banks = await AccountsAPI.GetBanks();
        AccountTypes = await AccountsAPI.GerAccountTypes();
        Account = IsNew ? new() : await AccountsAPI.Get(Id);
    }

    async Task<HttpResponseMessage> Addition() => await AccountsAPI.PostAccount(Account);

    async Task<HttpResponseMessage> Edition() => await AccountsAPI.PutAccount(Id, Account);

    string GetHeaderText() => IsNew ? "Incluindo" : "Editando";

    void CleanDependencys() 
    {
        Account.Bank = null;
    }
    async Task CheckResult(HttpResponseMessage result)
    {
        if (!result.IsSuccessStatusCode) {
            var exMsg = await result.Content.ReadAsStringAsync();
            throw new Exception(exMsg);
        }

        NavigationManager.NavigateTo(AccountsRoutes.GoToIndex());
    }
    #endregion

    #region VALIDATIONS
    bool Loading => 
        Account is null ||
        Banks is null ||
        AccountTypes is null;

    bool IsNew => Id == 0;
    #endregion
}
