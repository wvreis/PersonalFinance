@using PersonalFinance.Helpers.APIs;
@using PersonalFinance.Helpers.Routes;
@using PersonalFinance.Helpers;
@using PersonalFinance.Models;
@attribute [
    Route(AccountsRoutes.Addition),
    Route(AccountsRoutes.Edition)
]
@inherits General

@if (Loading) {
    <p>Carregando...</p>
}
else {
    <h3>@GetHeaderText()</h3>

    <h3>Conta</h3>

    <EditForm Model="Account" OnValidSubmit="Confirm">
        <input type="hidden" name="Id" value="@(Account.Id)" />

        <div>
            <label for="Name">Descrição:</label>
            <input type="text" id="Name" name="Name" @bind-value="@(Account.Name)" required />
        </div>

        <div>
            <label for="OpeningBalance">Saldo Inicial:</label>
            <input type="number" id="OpeningBalance" step="0.01" @bind-value="@(Account.OpeningBalance)" />
        </div>

        <InputSelect @bind-Value="@Account.BankNumber">
            <option value="">Selecione um Banco...</option>
            @foreach (var bank in Banks) {
                <option value="@bank.Number">@bank.Name</option>
            }
        </InputSelect>

        <div>
            <input type="submit" value="Confirmar" />

            @if (!IsNew) {
                <input type="button" @onclick="@Remove" value="Excluir" />
            }
        </div>
    </EditForm>
}


@code {
    [Parameter] public int Id { get; set; }
    Account Account { get; set; }

    List<Bank> Banks;

    protected override async Task OnInitializedAsync()
    {
        Banks = Data.MainBanks.GetBanks();

        Account =  IsNew ?  new() :await AccountsAPI.Get(Id);
    }

    async Task Confirm()
    {
        try {
            var result = IsNew ? await Addition() : await Edition();

            if (!result.IsSuccessStatusCode)
                throw new Exception(result.ReasonPhrase);

            NavigationManager.NavigateTo(AccountsRoutes.GoToIndex());
        }
        catch (Exception ex) {

            throw ex;
        }
    }

    async Task Remove()
    {
        try {
            var result = await AccountsAPI.DeleteAccount(Id);

            if (!result.IsSuccessStatusCode)
                throw new Exception(result.ReasonPhrase);

            NavigationManager.NavigateTo(AccountsRoutes.GoToIndex());
        }
        catch (Exception ex) {

            throw ex;
        }
    }

    async Task<HttpResponseMessage> Addition() => await AccountsAPI.PostAccount(Account);
    async Task<HttpResponseMessage> Edition() => await AccountsAPI.PutAccount(Id, Account);

    #region AUXILIARY
    string GetHeaderText() => IsNew ? "Incluindo" : "Editando";
    #endregion

    #region VALIDATIONS
    bool Loading => Account is null;
    bool IsNew => Id == 0;
    #endregion
}
